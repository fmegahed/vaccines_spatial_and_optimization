---
title: "COVID-19 Vaccines by County"
subtitle: "Step 0: Preparing the Data for Non-Linear Least Square Modeling"
author:
  - name: Longwen Zhao
    email: longwen.zhao@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
  - name: Maciej Rysz
    orcid: 0000-0003-2667-0398
    email: ryszmw@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Fadel M. Megahed
    orcid: 0000-0003-2194-5110
    email: fmegahed@miamioh.edu
    corresponding: true
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Allison Jones-Farmer
    orcid: 0000-0002-1529-1133
    email: farmerl2@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Steve Rigdon
    orcid: 0000-0001-7668-0899
    email: steve.rigdon@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html:
    code-fold: false
    code-tools: true
    code-download: true
    code-link: true
    highlight-style: pygments
    number-sections: true
    paged-df: true
    toc: true
    toc-float: true
    code-overflow: wrap
    include-in-header: structure.tex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  cache = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  progress = FALSE, 
  verbose = FALSE,
  fig.path = "figs/",
  cache.extra = set.seed(2022), 
  autodep = TRUE
)

knitr::dep_auto()

options(qwraps2_markup = "markdown")

# Setting properties for the default theme_bw() behavior for all plots
if(require(ggplot2) == FALSE) install.packages("ggplot2")
library(ggplot2) ; theme_set(theme_bw(base_size = 11) + theme(legend.position = 'top')) 

# Setting default color palettes to RColorBrewer Palettes
if(require(RColorBrewer) == FALSE) install.packages("RColorBrewer")
scale_colour_discrete = scale_color_brewer(palette = "Dark2")
```

# Objectives of this Document

This is the second Markdown in our analysis workflow (see [step0_extract_and_eda.html](https://fmegahed.github.io/research/covid_vaccines/step0_extract_and_eda.html) for our first set of analyses). The main objectives of this document are as follows:

-   Construct matrices (the mathematical representation) which separate:
    -   the $\mathbf{y}^*_i$ = $\begin{bmatrix} u_{i,1} & u_{i,2} & \dots & u_{i,t} \end{bmatrix}$ is a vector containing $t$ observations of the cumulative count of vaccinated, but not allocated, individuals in state $i$. We refer to this matrix as the matrix of unknowns.
    -   *counties* with complete (i.e., no missing) data for `series_complete_pop_pct`;\
    -   *counties* with incomplete data for `series_complete_pop_pct`;\
    -   *counties* with censored data for `series_complete_pop_pct`; and
-   Perform any additional transformations on the input data so that it can be easily modeled using non-linear least squares.

---

# R Setup and Required Packages

In this project, the open-source `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language is used to model the COVID-19 percent fully-vaccinated progression in different U.S. counties. `r fontawesome::fa(name = "r-project", fill = "steelblue")` is maintained by an international team of developers who make the language available at [The Comprehensive R Archive Network](https://cran.r-project.org/). Readers interested in reusing our code and reproducing our results should have `r fontawesome::fa(name = "r-project", fill = "steelblue")` installed locally on their machines. `r fontawesome::fa(name = "r-project", fill = "steelblue")` can be installed on a number of different operating systems (see [Windows](https://cran.r-project.org/bin/windows/), [Mac](https://cran.r-project.org/bin/macosx/), and [Linux](https://cran.r-project.org/bin/linux/) for the installation instructions for these systems). We also recommend using the RStudio interface for `r fontawesome::fa(name = "r-project", fill = "steelblue")`. The reader can [download RStudio](http://www.rstudio.com/ide) for free by following the instructions at the link. For non-R users, we recommend the [Hands-on Programming with R](https://rstudio-education.github.io/hopr/packages.html) for a brief overview of the software's functionality. Hereafter, we assume that the reader has an introductory understanding of the `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language.

In the code chunk below, we load the packages used to support our analysis. Our input and output files can also be accessed/ downloaded from [fmegahed/vaccines_spatial_and_optimization](https://github.com/fmegahed/vaccines_spatial_and_optimization).

```{r packages, cache=FALSE}
# create a files directory if it does not exist
if (!dir.exists('step0_transform_files')) {dir.create('step0_transform_files')}

# Check and install if these packages are not found locally on machine
if(require(pacman)==FALSE) install.packages("pacman")
if(require(devtools)==FALSE) install.packages("devtools")
if(require(urbnmapr)==FALSE) devtools::install_github('UrbanInstitute/urbnmapr')
if(require(albersusa)==FALSE) devtools::install_github("hrbrmstr/albersusa")

pacman::p_load(tidyverse, magrittr, janitor, lubridate, hms, skimr, # data analysis
               fontawesome, rsvg, # for fontawesome icons
               pander, gt, gtExtras, knitr, DT, # for nicely printed outputs
               scales, plotly, # for plots
               urbnmapr, tmap, sf, leaflet, albersusa, tigris, # for maps
               gifski, av) # for creating gif and videos
```

---

# Examining the Number of Unknowns Per State

## The Unknowns from our `raw_vaccines_tbl`

```{r unknowns}
raw_vaccines_tbl = 
  # reading the raw data
  read_rds('data/raw_vaccines_tbl.rds') %>% 
  # removing non-contiguous US states
  filter(!recip_state %in% c('AK', 'AS', 'FM', 'GU', 'HI', 
                             'MH', 'MP', 'PR', 'PW', 'UNK', 'VI')) %>% 
  # converting the date variable from chr to date
  mutate(date = mdy(date)) %>% 
  # arranging the data in an ascending order of date and fips codes
  arrange(date, fips) %>% 
  # selecting the subset of columns needed for the analysis
  select(date:completeness_pct, series_complete_yes, series_complete_pop_pct, 
         svi_ctgy, metro_status, census2019)

y_star = 
  raw_vaccines_tbl %>% 
  # creating the day_of_month and month variables
  mutate(
    day_of_month = day(date),
    month = month(date) 
    ) %>% 
  # focusing on UNK fips, which gives us one observation per state per date
  filter(fips == 'UNK' & day_of_month == 1) %>% 
  # selecting a subset of variables for this analysis
  select(date, recip_state, completeness_pct, series_complete_yes)
```

## So What is in Our Unknown Data?

### A Heat Map

```{r unknowns_heat_map, fig.height=6}
y_star %>% 
  ggplot() +
  geom_tile(aes(x = date, y = recip_state, fill = series_complete_yes)) +
  scale_x_date(breaks = pretty_breaks(n = 12)) +
  scale_y_discrete() +
  scale_fill_distiller(
    palette = 'Oranges', direction = 1, na.value = "white",
    name = 'Unknowns', labels = scales::comma
  ) +
  labs(
    x = 'Month', 
    y = 'State', 
    title = 'COVID-19 Vaccinated Individuals, with Unknown Counties, in Each State',
    subtitle = 'Data is not always cumulative for each state since some rows get lighter over time. TX is missing data before Nov, 2021.') + 
  theme_bw(base_size = 10) +
  theme(
    legend.position = 'bottom', 
    legend.key.width = unit(2, "cm"),
    plot.margin = margin(t = 0.1, r = 0.5, b = 0.1, l = 0.1, unit = 'cm')
  ) -> p_unknown_heatmap

ggsave(filename = 'figs/p_unknown_heatmap.png', 
       plot = p_unknown_heatmap + theme(legend.key.width = unit(0.2, "cm")),
       height = 6, width = 8, units = 'in')

ggplotly()
```

### A Representative Sample of Timeseries Plots

```{r unknown_ts_plots}
y_star %>%
  filter(recip_state %in% c('CA', 'GA', 'MO', 'OH', 'TX', 'VA')) %>% 
  ggplot(aes(x = date, y = series_complete_yes, group = recip_state)) +
  geom_line() +
  geom_point(size = 1.5) +
  facet_wrap(~recip_state, scales = 'free_y', ncol = 2) +
  scale_x_date(breaks = pretty_breaks(n = 6)) +
  scale_y_continuous(breaks = pretty_breaks(n = 5), labels = scales::comma) +
  labs(
    x = 'Month', y = 'Unknown Counts Per State', 
    title = 'COVID-19 Vaccinated Individuals, with Unknown Counties, Over Time',
    subtitle = 'TX has no unknown data until Nov 2021. GA and VA adjusted their data since counts are not monotonically increasing.',
    caption = paste0(
      "Source: Data from the CDC's COVID-19-Vaccinations by County (8xkx-amqh) Dataset. The data was downloaded at ", file.info('data/raw_vaccines_tbl.rds')$mtime %>% 
        lubridate::as_date() %>% format('%B %d, %Y'), '.') 
  )  +
  theme_bw(base_size = 10) -> p_ts_unknown

ggsave(filename = 'figs/ts_unknowns.png', plot = p_ts_unknown,
       height = 4, width = 8, units = 'in')

ggplotly()
```

### A Count of Number of Observations Per State

In our dataset, we are supposed to have `r seq.Date(from = min(y_star$date), to = max(y_star$date), by = 'month') %>% length()` observations (i.e., months of data) per state. In the table below, we print states that has missing observations.

```{r count_unknowns}
# computing the expected number of observations per state
# based on the minimum and max date values that we have in our dataset
expected_number_of_obs_per_state = 
  seq.Date(from = min(y_star$date), to = max(y_star$date), by = 'month') %>% 
  length()

# counting the number of observations in a given state
y_star %>% 
  count(recip_state) %>% 
  arrange(n) %>% 
  filter(n < expected_number_of_obs_per_state) %>% 
  gt() %>% 
  gt_hulk_col_numeric(n)
```

## Fixing/Imputing the Missing "Unknown" Data for TX

We can impute the unknown data by utilizing the [CDC's COVID-19 Vaccinations in the United States,Jurisdiction dataset](https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc). This dataset's unit of analysis is each state, and it contains our response variable of interest `series_complete_yes`.

### The CDC's Vaccination Dataset by State

In the code chunk below, we read the We can impute the unknown data by utilizing the [CDC's COVID-19 Vaccinations in the United States,Jurisdiction dataset](https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc) and identify the dates for which the series is non-zero.

```{r cdc_state_data}
cdc_state_vacc = 
  read_csv('https://data.cdc.gov/api/views/unsk-b7fc/rows.csv?accessType=DOWNLOAD') %>% 
  # converting names to lower case
  clean_names() %>% 
  # selecting columns of interest
  select(date:location, 
         series_complete_yes,
         series_complete_pop_pct) %>% 
  # renaming the location column to recip_state to match our earlier data
  rename(recip_state = location) %>% 
  # converting the date column to date and creating the day_of_month variable
  mutate(date = mdy(date), day_of_month = day(date)) %>% 
  # filtering the data to the continental U.S. and first day of the month
  filter(!recip_state %in% c('AK', 'AS', 'FM', 'GU', 'HI', 
                             'MH', 'MP', 'PR', 'PW', 'UNK', 'VI',
                             'BP2', 'DD2', 'IH2', 'LTC', 'RP', 'US', 'VA2') &
        day_of_month == 1) %>% 
  # arranging the data in ascending order by date and state
  arrange(date, recip_state)

# finding the date for which each series_complete_yes is non-zero
cdc_state_vacc %>% 
  # group by state
  group_by(recip_state) %>% 
  # creating a label which has NA if the cumulative number of vaccinated in the state = 0
  mutate(na_label = ifelse(series_complete_yes == 0, NA, 1)) %>% 
  # drop the rows containing NA (so we can find the minimum date)
  drop_na() %>% 
  # computing the min date for non-zero entries for each state
  summarise(min_date = min(date)) %>% 
  DT::datatable(options = list(pageLength = 10, autoWidth = TRUE))

```

### Cumulative Vaccinated by State as Computed from `raw_vaccines_tbl`

In the code chunk below, we perform a "sanity" check to ensure that the data from both CDC datasets (i.e.,[COVID-19 Vaccinations in the United States by County](https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-County/8xkx-amqh) and [CDC's COVID-19 Vaccinations in the United States,Jurisdiction dataset](https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc)) match. To perform the sanity check, we:  

- aggregated the [COVID-19 Vaccinations in the United States by County](https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-County/8xkx-amqh) dataset, by summing the `series_complete_yes` for all counties within a given state; and    
- computed the difference using `series_complete_yes_state` `-` `series_complete_yes`, which would result in:    
    + `0` if the aggregation of the county dataset results in the same value as the by state data from the CDC

```{r state_aggregates}
raw_vaccines_tbl %>% 
  # creating the day of month variable
  mutate(day_of_month = day(date)) %>% 
  # filtering to the first of the month
  filter(day_of_month == 1) %>% 
  # grouping by state
  group_by(date, recip_state) %>% 
  # creating an aggregated sum of the series_complete_yes by state
  summarize(series_complete_yes_state = sum(series_complete_yes, na.rm = T)) %>% 
  # ungroup
  ungroup() ->
  total_vaccines_by_state

# we left_join both datasets such that the number of rows is determined by that of
# vaccines_by_state (aggregated from the county data)
left_join(
  x = total_vaccines_by_state,
  y = cdc_state_vacc %>% select(-c(mmwr_week, series_complete_pop_pct, day_of_month)),
  by = c('date' = 'date', 'recip_state' = 'recip_state')
) %>% 
  # limiting the data to Texas and starting from 2021-11-01 when TX started reporting
  # county level data based on our 1st of the month filter
  filter(recip_state == 'TX' & date >= ymd('2021-11-01')) %>% 
  # creating a new variable which computes the difference between both datasets
  # 0 = both are same, 1+ = aggregation of county data presents larger values
  # and negative means that the CDC's state data has more values (which are not accounted
  # in the summation of our unknowns to known counties)
  mutate(diff_in_datasets = series_complete_yes_state - series_complete_yes) %>% 
  DT::datatable(options = list(pageLength = 10, autoWidth = TRUE)) %>% 
  formatRound('series_complete_yes_state', digits = 0) %>% 
  formatRound('series_complete_yes', digits = 0)
```

## Fixing/Imputing the Missing "Unknown" Data for TX

```{r unknown_data_imputation}
# imputing the data for texas where we assign all the state totals to the unknowns
# up to date < ymd('2021-11-01')
tx_unknowns = 
  cdc_state_vacc %>% 
  # removing not needed columns
  select(-c(mmwr_week, series_complete_pop_pct, day_of_month)) %>% 
  # less than instead of greater than
  filter(recip_state == 'TX' & date < ymd('2021-11-01')) %>% 
  mutate(
    completeness_pct = NA, 
    series_complete_yes = ifelse(series_complete_yes == 0, NA, series_complete_yes)
  ) %>% 
  drop_na(series_complete_yes) %>% 
  relocate(series_complete_yes, .after = last_col())
```

---

# Our PreProcessed Data

## The Matrix of State Unknowns: $\mathbf{Y}^*$

```{r y_star_final}
# we now have a complete y_star matrix
y_star_final = 
  bind_rows(y_star, tx_unknowns) %>% 
  arrange(date, recip_state) %>% 
  select(-completeness_pct) %>% 
  group_by(recip_state) %>% 
  nest()

y_star_final = 
  y_star_final %>% 
  mutate(
    date = map(.x = data, .f = magrittr::extract2, 'date'),
    series_complete_yes = map(.x = data, .f = magrittr::extract2, 'series_complete_yes'),
    series_complete_yes_ts = map(.x = series_complete_yes, .f = ts, 
                        start = c(2021, 1), frequency = 12)
    )

write_rds(x= y_star_final, file = 'data/y_star_final.rds')

y_star_final
```

## The Matrix of Known Cumulative Percent Vaccinated: $\mathbf{P}$

### Counting the Number of Missing by FIPS and State

In the code chunk below, we compute the number of observations (`n`) where the `series_complete_pop_pct` was non-zero. We expected to see a zero on `2021-01-01` since the [first COVID-19 administered in the U.S.](https://www.wsj.com/articles/covid-19-vaccinations-in-the-u-s-slated-to-begin-monday-11607941806) was on `2020-12-14`, and we are looking at the percent of fully vaccinated individuals (i.e., two-doses of a two-dose vaccine since the [Johnson and Johnson 1-dose vaccine was approved on February 27, 2021](https://www.fda.gov/emergency-preparedness-and-response/coronavirus-disease-2019-covid-19/janssen-covid-19-vaccine)). Thus, we hypothesize that most counties should have vaccinated at least one individual by `2021-02-01`.

```{r p_matrix_index}
vaccines = read_rds('data/vaccines.rds')

# Computing the expected number of observations (i.e., months of data) per county
expected_number_of_obs_per_county = 
  seq.Date(from = min(vaccines$date), to = max(vaccines$date), by = 'month') %>% 
  length()

# Constructing an index which counts both the number of observations and number
# missing per fips and state (state is redundant but we added it for
# easily consuming the data)
index_p_matrix = 
  vaccines %>% 
  select(date, fips, recip_county, recip_state, series_complete_pop_pct) %>% 
  # group by fips so we can count the number of observations per county
  # we added the recip_state to facilitate the counting by state if we wanted to
  group_by(fips, recip_state) %>% 
  # converting zeros to NAs (using < 0.00001 for numeric precision purposes)
  mutate(series_complete_pop_pct = 
           ifelse(series_complete_pop_pct < 10^-6, NA, series_complete_pop_pct)) %>% 
  drop_na() %>% 
  count(fips) %>% 
  mutate(num_missing = expected_number_of_obs_per_county - n)

index_incomplete = which(index_p_matrix$num_missing > 1)
fips_incomplete = index_p_matrix$fips[index_incomplete]

# creating indices for complete as well
# since our total = complete + incomplete + missing
index_complete = which(index_p_matrix$num_missing <= 1)
fips_complete = index_p_matrix$fips[index_complete]
```

### A Summary of Number of Missing Observations

From the computations above, the distribution of missing observations per county (i.e., ones where there are zero observations per county) is shown below. Note that the top row corresponds to the observed number of missing observations per county, and the bottom row corresponds to its frequency. Note that we expected most counties to start having data from February 1, 2022 (i.e., `num_missing` = 1) since residents would not have been able to take their second dose prior to mid-January.

```{r missing_overview_table}
table(index_p_matrix$num_missing) %>% pander()
```

```{r missing_overview_bar, include=FALSE}
# not included here since it is redudant with table above
# chart is created primarily to add to the paper's supplementary materials

index_p_matrix %>% 
  ggplot(aes(x = num_missing)) +
  geom_bar(aes(y = ..count..)) +
  geom_text(aes(y = ..count.., label = comma(..count..)), 
            stat = "count", vjust = 0, nudge_y = 30) +
  scale_x_continuous(breaks = pretty_breaks(n=20), 
                     limits = c(0,  expected_number_of_obs_per_county)) +
  scale_y_continuous(breaks = pretty_breaks(n=10), labels = comma, limits = c(0,3000)) +
  theme_bw() +
  labs(x = paste('Number of Missing Observations Per County out of',
                 expected_number_of_obs_per_county, 'expected'), 
       y = 'Frequency',
       title = 'The number of missing observations per county in the continental US')
```

### Missingness by State

In the code chunk below, we compute the median number of missing observations across all counties in a given state. The printout shows the results arranged in a descending order. The table is searchable so that the reader can explore any state they are interested in.

```{r missingness_by_state}
index_p_matrix %>% 
  ungroup() %>% 
  group_by(recip_state) %>% 
  summarise( median_num_missing = median(num_missing, na.rm = T) ) %>% 
  arrange(desc(median_num_missing)) %>% 
  DT::datatable(options = list(pageLength = 10, autoWidth = TRUE))
```

### Missingness by County

Below, we provide an interactive map of the number of missing observations per county. In addition, a static map is generated but not shown in the Markdown output.

```{r missingness_by_county_int}
#### Creating a longlat projection (required by leaflet)
leaflet_sf = counties_sf(proj = 'longlat') %>% # from albersua
  filter(!state %in% c('Alaska', 'Hawaii')) 

leaflet_sf = 
  leaflet_sf %>% 
  geo_join(index_p_matrix %>% 
             ungroup() %>% 
             select(fips, num_missing) %>%
             unique(),
           by_sp= 'fips', by_df= 'fips') %>% 
  mutate(num_missing_disc = 
           cut(num_missing,
               breaks = 
                 c(0, 0.01, 1.01, 4.01, 9.01, 10.01, (1+expected_number_of_obs_per_county)),
               labels = 
                 c('0', '1', '2-4', '5-9', '10', '11+')
               ))

#### Setting the Color Scheme
leaflet_pal =  colorFactor('Paired', 
                            domain = leaflet_sf$num_missing_disc, 
                            na.color = "white")

#### The interactive visual
leaflet() %>% # initializing the leaflet map
  setView(lng = -96, lat = 37.8, zoom = 4) %>% # setting the view on Continental US
  addTiles() %>% # adding the default tiles
  addPolygons(
    data = leaflet_sf, stroke = FALSE, fillColor = ~leaflet_pal(leaflet_sf$num_missing_disc), # adding the data
    weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, # adding color specs
    popup = paste(
      "State:", leaflet_sf$state, '<br>',
      "County:", leaflet_sf$name, '<br>', 
      'Num Missing:', leaflet_sf$num_missing)
  ) %>% #pop-up Menu
  addLegend(position = "bottomright", pal = leaflet_pal, values =  leaflet_sf$num_missing_disc, 
            title = "# Missing Group", opacity = 1) # legend formatting
```

```{r static_map_missing, include=FALSE}
# Getting the counties map from the urbnmapr package and excluding non-continental US
counties_sf = get_urbn_map(map = "counties", sf = TRUE) %>% 
  filter(!state_name %in% c('Alaska', 'Hawaii') )

# Getting the states map from the urbnmapr package and excluding non-continental US
states_sf = get_urbn_map(map = "states", sf = TRUE) %>% 
  filter(!state_name %in% c('Alaska', 'Hawaii') )

# joining the data
cty_sf_missing = left_join(
  x = counties_sf,
  y = index_p_matrix %>% ungroup() %>% select(fips, num_missing),
  by = c("county_fips" = "fips")
) %>% 
  mutate(num_missing_disc = 
           cut(num_missing,
               breaks = 
                 c(0, 0.01, 1.01, 4.01, 9.01, 10.01, (1+expected_number_of_obs_per_county)),
               labels = 
                 c('0', '1', '2-4', '5-9', '10', '11+')
           ))

# creating static visuals to be potentially used in our paper
# not included in the output for the Markdown/Quarto since we are including
# the interactive plot
png(filename = 'figs/county_missing_obs.png', width = 1366, height = 768, pointsize = 16)
tm_shape(cty_sf_missing) + 
  tm_borders(col = "gray80", lwd = 0.15) +
  tm_polygons('num_missing_disc', title = '#Obs Missing', palette = "Paired") +
  tm_shape(states_sf) + 
  tm_borders(col = "black", lwd = 0.5)
invisible( dev.off() ) # to suppress the unwanted output from dev.off
```

## Generating the $\mathbf{P}$ Matrix

```{r p_matrix}
p_matrix = vaccines %>% 
  select(recip_state, fips, date, series_complete_pop_pct) %>% 
  filter(fips %in% fips_complete) %>% 
  group_by(recip_state, fips) %>% 
  nest() %>% 
  mutate(
    date = map(.x = data, .f = magrittr::extract2, 'date'),
    series_complete_pop_pct = map(.x = data, .f = magrittr::extract2, 'series_complete_pop_pct')
    )

write_rds(x = p_matrix, file = 'data/p_matrix_final.rds')

p_matrix
```

## The Complement of the $\mathbf{P}$ Matrix

```{r comp_p_matrix}
comp_p_matrix = vaccines %>% 
  select(recip_state, fips, date, series_complete_pop_pct) %>% 
  filter(fips %in% fips_incomplete) %>% 
  group_by(recip_state, fips) %>% 
  nest() %>% 
  mutate(
    date = map(.x = data, .f = magrittr::extract2, 'date'),
    series_complete_pop_pct = map(.x = data, .f = magrittr::extract2, 'series_complete_pop_pct')
    )

write_rds(x = comp_p_matrix, file = 'data/comp_p_matrix_final.rds')

comp_p_matrix # where the observed months will contain MULTIPLE 0s
```

---

# Appendix

In this appendix, we print all the `r fontawesome::fa(name = "r-project", fill = "steelblue")` packages used in our analysis and their versions to assist with reproducing our results/analysis.

```{r sessionInfo}
pander(sessionInfo(), compact = TRUE) # printing the session info
```
