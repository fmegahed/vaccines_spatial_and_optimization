---
title: "COVID-19 Vaccines by County"
subtitle: "Step 1: Logistic Growth Curve Modeling"
author:
  - name: Longwen Zhao
    email: longwen.zhao@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
  - name: Maciej Rysz
    orcid: 0000-0003-2667-0398
    email: ryszmw@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Fadel M. Megahed
    orcid: 0000-0003-2194-5110
    email: fmegahed@miamioh.edu
    corresponding: true
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Allison Jones-Farmer
    orcid: 0000-0002-1529-1133
    email: farmerl2@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Steve Rigdon
    orcid: 0000-0001-7668-0899
    email: steve.rigdon@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html:
    code-fold: false
    code-tools: true
    code-download: true
    code-link: true
    highlight-style: pygments
    number-sections: true
    paged-df: true
    toc: true
    toc-float: true
    code-overflow: wrap
    include-in-header: structure.tex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  cache = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  progress = FALSE, 
  verbose = FALSE,
  fig.path = "figs/",
  cache.extra = set.seed(2022), 
  autodep = TRUE
)

knitr::dep_auto()

options(qwraps2_markup = "markdown")

# Setting properties for the default theme_bw() behavior for all plots
if(require(ggplot2) == FALSE) install.packages("ggplot2")
library(ggplot2) ; theme_set(theme_bw(base_size = 11) + theme(legend.position = 'top')) 

# Setting default color palettes to RColorBrewer Palettes
if(require(RColorBrewer) == FALSE) install.packages("RColorBrewer")
scale_colour_discrete = scale_color_brewer(palette = "Dark2")
```

# Objectives of this Document

This is the third Markdown in our analysis workflow (see [step0_extract_and_eda.html](https://fmegahed.github.io/research/covid_vaccines/step0_extract_and_eda.html) and [step0_transform.html](https://fmegahed.github.io/research/covid_vaccines/step0_transform.html) for our previous analyses). The main objective of this document is to:

- Fit a logistic growth model to describe the cumulative percent of vaccinated in a given county over time. Note that we limit the fits to the `r scales::comma(nrow(readRDS("data/p_matrix_final.rds")))` counties with complete data, which are stored in the [p_matrix_final.rds](https://github.com/fmegahed/vaccines_spatial_and_optimization/blob/main/data/p_matrix_final.rds?raw=true) (generated by [step0_transform.html](https://fmegahed.github.io/research/covid_vaccines/step0_transform.html) in our previous analyses). 

---

# R Setup and Required Packages

In this project, the open-source `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language is used to model the COVID-19 percent fully-vaccinated progression in different U.S. counties. `r fontawesome::fa(name = "r-project", fill = "steelblue")` is maintained by an international team of developers who make the language available at [The Comprehensive R Archive Network](https://cran.r-project.org/). Readers interested in reusing our code and reproducing our results should have `r fontawesome::fa(name = "r-project", fill = "steelblue")` installed locally on their machines. `r fontawesome::fa(name = "r-project", fill = "steelblue")` can be installed on a number of different operating systems (see [Windows](https://cran.r-project.org/bin/windows/), [Mac](https://cran.r-project.org/bin/macosx/), and [Linux](https://cran.r-project.org/bin/linux/) for the installation instructions for these systems). We also recommend using the RStudio interface for `r fontawesome::fa(name = "r-project", fill = "steelblue")`. The reader can [download RStudio](http://www.rstudio.com/ide) for free by following the instructions at the link. For non-R users, we recommend the [Hands-on Programming with R](https://rstudio-education.github.io/hopr/packages.html) for a brief overview of the software's functionality. Hereafter, we assume that the reader has an introductory understanding of the `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language.

In the code chunk below, we load the packages used to support our analysis. Our input and output files can also be accessed/ downloaded from [fmegahed/vaccines_spatial_and_optimization](https://github.com/fmegahed/vaccines_spatial_and_optimization).

```{r packages, cache=FALSE}
# create a files directory if it does not exist
if (!dir.exists('step1_logistic_growth_files')) {dir.create('step1_logistic_growth_files')}

# Check and install if these packages are not found locally on machine
if(require(pacman)==FALSE) install.packages("pacman")
if(require(devtools)==FALSE) install.packages("devtools")
if(require(urbnmapr)==FALSE) devtools::install_github('UrbanInstitute/urbnmapr')
if(require(albersusa)==FALSE) devtools::install_github("hrbrmstr/albersusa")

pacman::p_load(tidyverse, magrittr, janitor, lubridate, hms, skimr, # data analysis
               fontawesome, rsvg, # for fontawesome icons
               pander, knitr, DT, sparkline, # for nicely printed outputs
               scales, plotly, # for plots
               urbnmapr, tmap, sf, leaflet, albersusa, tigris, # for maps
               gifski, av) # for creating gif and videos
```


---

# Fitting the Logistic Growth Curve Model

In the code chunk below, we fit a logistic growth curve for all counties containing no missing data. To fit the curve, we have capitalized on the following two functions from the `stats` package:  

- `nls()`, which determines the nonlinear (weighted) least-squares estimates of the parameters of a nonlinear model; and   
- `SSlogis`, which is a Self-Starting NLS Logistic Model. It evaluates the logistic function and its gradient. It has an initial attribute that creates initial estimates of the parameter.

Our output is stored to [data/growth_curve_models.rds](https://github.com/fmegahed/vaccines_spatial_and_optimization/blob/main/data/growth_curve_models.rds) and printed in a searchable datatable for the readers' convenience.

```{r nested_models}
vaccines = read_rds('data/vaccines.rds')

# Computing the expected number of observations (i.e., months of data) per county
months_from_start = 
  seq.Date(from = min(vaccines$date), to = max(vaccines$date), by = 'month') %>% 
  length()

# creating a vector of months from start, which will be our dependent variable representing time
months_from_start = 1:months_from_start

growth_curve_models = 
  # reading the p_matrix containing the perc fully vaccinated for each county w/ complete data
  read_rds('data/p_matrix_final.rds') %>% 
  # creating four new variables (one for the model and one for each of the phis)
  # note that we used transmute instead of mutate to only keep the two grouping variables and 
  # the four variables created in this step to reduce the stored object size
  transmute(
    # fitting self-starting logistic growth curve models
    model = map(
      .x = data, 
      .f = function(df){ 
        nls(series_complete_pop_pct ~ SSlogis(months_from_start, phi1, phi2, phi3), data = df)}
    ),
    # extracting the model parameters
    phi1 = map_dbl( .x = model, .f = function(x) x$m$getPars()[['phi1']] ),
    phi2 = map_dbl( .x = model, .f = function(x) x$m$getPars()[['phi2']] ),
    phi3 = map_dbl( .x = model, .f = function(x) x$m$getPars()[['phi3']] )
  ) %>%
  # since we have the parameters from the model so we will not store the full model
  # in our initial experiments this reduced the object size from 321.1 MB to 0.5MB
  # we are only storing the Phis, recip_state and fips
  select(-model)

# storing the data
write_rds(x = growth_curve_models, file = 'data/growth_curve_models.rds')


# Code below is used to add a sparklines to the DT datatable output to help
# visualize the difference in fitted curves across the different counties

### custom_function for spk_line
spk_line_exp_growth = function(phi1, phi2, phi3, time = months_from_start){
  lgc_fitted = phi1/(1+exp(-(phi2+phi3*time))) # fitted values 
  # adding spark lines based on the sparkline package
  spk_chr(lgc_fitted, type = 'line')
}

### sparkline to be added to the table
spark_lines = growth_curve_models %>% 
  transmute(
    chart = pmap_chr(.l = list(phi1, phi2, phi3), .f = spk_line_exp_growth)
  )

# printing the phis in a searchable table for inspection
growth_curve_models %>%
  # adding the county name to the print out 
  left_join(y = vaccines %>% select(fips, recip_county) %>% unique(),
            by = 'fips') %>% 
  # moving the county name to after state name for ease of reading the table
  relocate(recip_county, .after = recip_state) %>% 
  # adding the sparklines to the printout
  left_join(y = spark_lines %>% ungroup() %>% select(-recip_state), by = 'fips') %>% 
  DT::datatable(rownames = FALSE, escape = FALSE, options = list(pageLength = 10, 
                               # adding the htmlwidget to the code
                               fnDrawCallback = htmlwidgets::JS(
                                 '
function(){
  HTMLWidgets.staticRender();
}
')
  )) %>% 
  spk_add_deps()   %>%
  DT::formatRound(columns = c('phi1', 'phi2', 'phi3'), digits = 1)
```

---

# Visualizing the Model Outputs







---

# Appendix

In this appendix, we print all the `r fontawesome::fa(name = "r-project", fill = "steelblue")` packages used in our analysis and their versions to assist with reproducing our results/analysis.

```{r sessionInfo}
pander(sessionInfo(), compact = TRUE) # printing the session info
```
