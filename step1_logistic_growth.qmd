---
title: "COVID-19 Vaccines by County"
subtitle: "Step 1: Logistic Growth Curve Modeling"
author:
  - name: Maciej Rysz
    orcid: 0000-0003-2667-0398
    email: ryszmw@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Longwen Zhao
    email: longwen.zhao@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
  - name: Fadel M. Megahed
    orcid: 0000-0003-2194-5110
    email: fmegahed@miamioh.edu
    corresponding: true
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Allison Jones-Farmer
    orcid: 0000-0002-1529-1133
    email: farmerl2@miamioh.edu
    affiliations:
      - name: Farmer School of Business, Miami University
        address: 800 E. High St.
        city: Oxford
        state: OH
        postal-code: 45056
  - name: Steve Rigdon
    orcid: 0000-0001-7668-0899
    email: steve.rigdon@slu.edu
    affiliations:
      - name: College for Public Health and Social Justice, Saint Louis University
        address: 3545 Lafayette Ave
        city: St. Louis
        state: MO
        postal-code: 63104
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html:
    code-fold: false
    code-tools: true
    code-download: true
    code-link: true
    highlight-style: pygments
    number-sections: true
    paged-df: true
    toc: true
    toc-float: true
    code-overflow: wrap
    include-in-header: structure.tex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  cache = TRUE,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  progress = FALSE, 
  verbose = FALSE,
  fig.path = "figs/",
  cache.extra = set.seed(2022), 
  autodep = TRUE
)

knitr::dep_auto()

options(qwraps2_markup = "markdown")

# Setting properties for the default theme_bw() behavior for all plots
if(require(ggplot2) == FALSE) install.packages("ggplot2")
library(ggplot2) ; theme_set(theme_bw(base_size = 11) + theme(legend.position = 'top')) 

# Setting default color palettes to RColorBrewer Palettes
if(require(RColorBrewer) == FALSE) install.packages("RColorBrewer")
scale_colour_discrete = scale_color_brewer(palette = "Dark2")
```

# Objectives of this Document

This is the third Markdown in our analysis workflow (see [step0_extract_and_eda.html](https://fmegahed.github.io/research/covid_vaccines/step0_extract_and_eda.html) and [step0_transform.html](https://fmegahed.github.io/research/covid_vaccines/step0_transform.html) for our previous analyses). The main objective of this document is to:

- Fit a logistic growth model to describe the cumulative percent of vaccinated in a given county over time. Note that we limit the fits to the `r scales::comma(nrow(readRDS("data/p_matrix_final.rds")))` counties with complete data, which are stored in the [p_matrix_final.rds](https://github.com/fmegahed/vaccines_spatial_and_optimization/blob/main/data/p_matrix_final.rds?raw=true) (generated by [step0_transform.html](https://fmegahed.github.io/research/covid_vaccines/step0_transform.html) in our previous analyses). 

---

# R Setup and Required Packages

In this project, the open-source `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language is used to model the COVID-19 percent fully-vaccinated progression in different U.S. counties. `r fontawesome::fa(name = "r-project", fill = "steelblue")` is maintained by an international team of developers who make the language available at [The Comprehensive R Archive Network](https://cran.r-project.org/). Readers interested in reusing our code and reproducing our results should have `r fontawesome::fa(name = "r-project", fill = "steelblue")` installed locally on their machines. `r fontawesome::fa(name = "r-project", fill = "steelblue")` can be installed on a number of different operating systems (see [Windows](https://cran.r-project.org/bin/windows/), [Mac](https://cran.r-project.org/bin/macosx/), and [Linux](https://cran.r-project.org/bin/linux/) for the installation instructions for these systems). We also recommend using the RStudio interface for `r fontawesome::fa(name = "r-project", fill = "steelblue")`. The reader can [download RStudio](http://www.rstudio.com/ide) for free by following the instructions at the link. For non-R users, we recommend the [Hands-on Programming with R](https://rstudio-education.github.io/hopr/packages.html) for a brief overview of the software's functionality. Hereafter, we assume that the reader has an introductory understanding of the `r fontawesome::fa(name = "r-project", fill = "steelblue")` programming language.

In the code chunk below, we load the packages used to support our analysis. Our input and output files can also be accessed/ downloaded from [fmegahed/vaccines_spatial_and_optimization](https://github.com/fmegahed/vaccines_spatial_and_optimization).

```{r packages, cache=FALSE}
# create a files directory if it does not exist
if (!dir.exists('step1_logistic_growth_files')) {dir.create('step1_logistic_growth_files')}

# Check and install if these packages are not found locally on machine
if(require(pacman)==FALSE) install.packages("pacman")
if(require(devtools)==FALSE) install.packages("devtools")
if(require(urbnmapr)==FALSE) devtools::install_github('UrbanInstitute/urbnmapr')
if(require(albersusa)==FALSE) devtools::install_github("hrbrmstr/albersusa")

pacman::p_load(tidyverse, magrittr, janitor, lubridate, hms, skimr, # data analysis
               car, # for logit function
               fontawesome, rsvg, # for fontawesome icons
               pander, knitr, DT, sparkline, # for nicely printed outputs
               scales, plotly, glue, # for plots
               urbnmapr, tmap, sf, leaflet, albersusa, tigris, # for maps
               gifski, av) # for creating gif and videos
```


---

# Fitting the Logistic Growth Curve Model

In the code chunk below, we fit a logistic growth curve for all counties containing no missing data. To fit the curve, we have capitalized on the `nls()` function from the `stats` pkg, which determines the nonlinear (weighted) least-squares estimates of the parameters of a nonlinear model. Note that the NLS function requires starting values, and we utilized the approach described in [Modeling Logistic Growth Data in R](https://bscheng.com/2014/05/07/modeling-logistic-growth-data-in-r/) to attain initial values that lead to model convergence. Note that the results attained from that approach were far superior than utilizing the `SSlogis()`, which is a Self-Starting NLS Logistic Model since the latter results led to flat curves (see [covid_vaccines step1_logistic_growth awful fits](https://github.com/fmegahed/vaccines_spatial_and_optimization/commit/6b6f4c263da7c76dede1b2c2cd0f08dc5dba9d75#diff-bf6596371eb0cfec090b9866b6a3fb8041433c8fa4a290b785e3e8ef99b7274a) for details of our computations).

Our output is stored to [data/growth_curve_models.rds](https://github.com/fmegahed/vaccines_spatial_and_optimization/blob/main/data/growth_curve_models.rds) and printed in a searchable datatable for the readers' convenience. <!--**Note that in our exploratory analysis, we have also examined adding the 395 counties which had no vaccination data prior to March 01, 2022. However, the results were similar. Hence, we include in our analysis the 2386 counties with complete data beginning February 01, 2022.** To see our results from our explanatory analysis, the reader is invited to see [step0_transform and step1 results while including the 395 counties](https://github.com/fmegahed/vaccines_spatial_and_optimization/commit/5921237601e0f0296c64063a06fb582c7373a35d). --> 


```{r nested_models}
vaccines = read_rds('data/vaccines.rds')

# Computing the expected number of observations (i.e., months of data) per county
months_from_start = 
  seq.Date(from = min(vaccines$date), to = max(vaccines$date), by = 'month') %>% 
  length()

# creating a vector of months from start, which will be our dependent variable representing time
months_from_start = 1:months_from_start

growth_curve_models = 
  # reading the p_matrix containing the perc fully vaccinated for each county w/ complete data
  read_rds('data/p_matrix_final.rds') %>% 
  # creating four new variables (one for the model and one for each of the phis)
  # note that we used transmute instead of mutate to only keep the two grouping variables and 
  # the four variables created in this step to reduce the stored object size
  transmute(
    # fitting self-starting logistic growth curve models
    model = map(
      .x = data, 
      .f = function(df){ 
        
        # finding reasonable starting values for the nls model
        possible_asymptote = max(df$series_complete_pop_pct)
        
        lm_fit = lm( logit(series_complete_pop_pct/possible_asymptote) ~ months_from_start,
                     data = df)
        
        phi1_start = possible_asymptote
        phi2_start = coef(lm_fit)[1]
        phi3_start = coef(lm_fit)[2]
        
        # fitting the nls model
        nls(series_complete_pop_pct ~ phi1/( 1+exp(- (phi2+phi3*months_from_start) ) ),
            data = df, 
            start=list(phi1=phi1_start, phi2=phi2_start, phi3=phi3_start)
        )
      }
    ),
    # extracting the model parameters
    phi1 = map_dbl( .x = model, .f = function(x) coef(x)[1] ),
    phi2 = map_dbl( .x = model, .f = function(x) coef(x)[2] ),
    phi3 = map_dbl( .x = model, .f = function(x) coef(x)[3] ),
    
    # computing goodness of fit
    bic = map_dbl( .x = model, .f = function(x) BIC(x) ),
    
    # examining the errors
    mae = map_dbl( .x = model, .f = function(x)  residuals(x) %>% abs() %>% mean() ),
    mse = map_dbl( .x = model, .f = function(x) mean( residuals(x)^2 ) ),
    rmse = map_dbl( .x = model, .f = function(x) mean( residuals(x)^2 ) %>% sqrt() )
  ) %>%
  # since we have the parameters from the model so we will not store the full model
  # in our initial experiments this reduced the object size from 321.1 MB to 0.5MB
  # we are only storing the Phis, recip_state and fips
  select(-model)

# storing the data
write_rds(x = growth_curve_models, file = 'data/growth_curve_models.rds')


# Code below is used to add a sparklines to the DT datatable output to help
# visualize the difference in fitted curves across the different counties

### custom_function for spk_line
spk_line_exp_growth = function(phi1, phi2, phi3, time = months_from_start){
  lgc_fitted = phi1/(1+exp(-(phi2+phi3*time))) # fitted values 
  # adding spark lines based on the sparkline package
  spk_chr(lgc_fitted, type = 'line')
}

### sparkline to be added to the table
spark_lines = growth_curve_models %>% 
  transmute(
    chart = pmap_chr(.l = list(phi1, phi2, phi3), .f = spk_line_exp_growth)
  )

# printing the phis in a searchable table for inspection
growth_curve_models %>%
  # adding the county name to the print out 
  left_join(y = vaccines %>% select(fips, recip_county) %>% unique(),
            by = 'fips') %>% 
  # moving the county name to after state name for ease of reading the table
  relocate(recip_county, .after = recip_state) %>% 
  # adding the sparklines to the printout
  left_join(y = spark_lines %>% ungroup() %>% select(-recip_state), by = 'fips') %>% 
  DT::datatable(rownames = FALSE, escape = FALSE, options = list(pageLength = 10, 
                               # adding the htmlwidget to the code
                               fnDrawCallback = htmlwidgets::JS(
                                 '
function(){
  HTMLWidgets.staticRender();
}
')
  )) %>% 
  spk_add_deps()   %>%
  DT::formatRound(columns = c('phi1', 'phi2', 'bic'), digits = 1) %>% 
  DT::formatRound(columns = c('phi3', 'mae', 'mse', 'rmse'), digits = 2)
```

Based on the `growth_curve_models` above, the averages of the MAE, MSE and RMSE for the `r nrow(growth_curve_models)` counties are: `r round( mean(growth_curve_models$mae), digits = 2 )`, `r round( mean(growth_curve_models$mse), digits = 2 )`, and `r round( mean(growth_curve_models$rmse), digits = 2 )`, respectively. 


---

# Visualizing the Model Outputs

```{r viz_model, out.height='800px', out.width='800px'}
sample_fips = read_rds(file = 'data/sample_fips.rds')

# sampling the original data
vaccines %>% 
  filter(fips %in% sample_fips) %>% 
  mutate(county_name = paste(recip_county, recip_state, sep = ', ') ) %>% 
  group_by(county_name, fips, ) %>% 
  select(-c(date, mmwr_week, recip_county, recip_state, completeness_pct, census2019) ) %>% 
  mutate(series_complete_pop_pct = list(series_complete_pop_pct)) %>% 
  unique() -> 
  vaccines_sampled 

# sampling the growth_curve data
fitted_tbl = 
  growth_curve_models %>% 
  filter(fips %in% sample_fips) %>%
  mutate(
    months_from_start = list(months_from_start),
    fitted_values = pmap(.l = list(phi1, phi2, phi3, months_from_start),
                         .f = function(x,y,z, m) x/(1+exp(-(y+z*m)))  ) )

# paramaters for plotting
colors_brewer = RColorBrewer::brewer.pal(n = 8, name = 'Dark2')
cols = c("A" = colors_brewer[1], 'B' = colors_brewer[2], 
         'C' = colors_brewer[3], 'D' = colors_brewer[4])
shapes = c("Metro" = 19, 'Non-metro' = 17)

# constructing a tibble which contains all plots
combined_plots = 
  # joining the data
  left_join(vaccines_sampled, fitted_tbl, by = 'fips') %>% 
  ungroup() %>%
  # making the data longer
  unnest(cols = c(series_complete_pop_pct, months_from_start, fitted_values)) %>% 
  # grouping and computing the months from start for our dataset
  # it will repeat for each fips due to grouping
  group_by(fips) %>% 
  # creating a dates column and converting the MAE column to character
  mutate(dates_from_start = seq.Date(from = min(vaccines$date),
                                      to = max(vaccines$date),
                                      by = 'months'),
         svi_ctgy = as.character(svi_ctgy),
         metro_status = as.character(metro_status),
         mae = ifelse(is.na(mae), 'No Fitted Model', as.character(round(mae, digits = 2)))) %>% 
  ungroup() %>% 
  # so it follows the same order as the TS plots in 4.2.2. in 
  # https://fmegahed.github.io/research/covid_vaccines/step0_extract_and_eda.html#time-series-plots
  group_by(svi_ctgy, metro_status) %>% 
  arrange(svi_ctgy, metro_status) %>% 
  ungroup() %>% 
  # creating a nested list with variables to be used in the plot
  nest(
    data = c(perc_rep_votes, svi_ctgy, metro_status,
             months_from_start, dates_from_start,
             series_complete_pop_pct, fitted_values) 
  ) %>% 
  # storing each plot in a variable titled 'plot'
  mutate(
    # creating the plot
    plot = pmap(
      list(a = data, b = county_name, c = mae),
      function(a, b, c){
        ggplot(data = a, aes(x = dates_from_start, color = svi_ctgy, shape = metro_status)) +
          geom_point(aes(y = series_complete_pop_pct),  size = 2)+
          geom_line(aes(y = fitted_values), size=1) +
          scale_color_manual(values = cols) +
          scale_shape_manual(values = shapes) +
          labs(x = 'Months from Start', y = '% Vaccinated', 
               title = glue('{b} (MAE: {c})') )  +
          scale_x_date(breaks = scales::pretty_breaks(n= 6)) +
          scale_y_continuous(breaks = scales::pretty_breaks(n= 5), limits = c(0,100)) +
          theme_bw(base_size = 10) +
          theme(legend.position = 'bottom', 
                legend.title=element_text(size=9),
                legend.text=element_text(size=8)) 
      }
    )
  )

# printing the tabsets programmatically
names(combined_plots$plot) = combined_plots$county_name

p_combined = ggpubr::ggarrange(plotlist = combined_plots$plot, 
                               ncol = 2,
                               nrow = 4,
                               common.legend = T)

ggsave(filename = 'figs/time_series_plot_response_and_fitted.png', 
       plot = p_combined,
       width=10, height=6)

# an interactive figure shown here
fig_list = iwalk(combined_plots$plot, ~ .x)
p_interactive = subplot(fig_list, nrows = 4, margin = 0.05, 
                        shareX = TRUE, shareY = TRUE)

p_interactive %>% 
  layout(
    height = 800, width = 800,
    title = 'The Use of Logistic Growth Curves on Complete Data',
    annotations = list(
      list(x = 0 , y = 1.05, showarrow = F, 
           text = paste0(names(combined_plots$plot)[1], ' (MAE:', combined_plots$mae[1], ')'),
           xref='paper', yref='paper'),
      list(x = 1 , y = 1.05, showarrow = F, 
           text = paste0(names(combined_plots$plot)[2], ' (MAE:', combined_plots$mae[2], ')'),
           xref='paper', yref='paper'),
      list(x = 0 , y = 0.75, showarrow = F, 
           text = paste0(names(combined_plots$plot)[3], ' (MAE:', combined_plots$mae[3], ')'),
           xref='paper', yref='paper'),
      list(x = 1 , y = 0.75, showarrow = F, 
           text = paste0(names(combined_plots$plot)[4], ' (MAE:', combined_plots$mae[4], ')'),
           xref='paper', yref='paper'),
      list(x = 0 , y = 0.48, showarrow = F, 
           text = paste0(names(combined_plots$plot)[5], ' (MAE:', combined_plots$mae[5], ')'),
           xref='paper', yref='paper'),
      list(x = 1 , y = 0.48, showarrow = F, 
           text = paste0(names(combined_plots$plot)[6], ' (MAE:', combined_plots$mae[6], ')'),
           xref='paper', yref='paper'),
      list(x = 0 , y = 0.2, showarrow = F, 
           text = paste0(names(combined_plots$plot)[7], ' (MAE:', combined_plots$mae[7], ')'),
           xref='paper', yref='paper'),
      list(x = 1 , y = 0.2, showarrow = F, 
           text = paste0(names(combined_plots$plot)[8], ' (MAE:', combined_plots$mae[8], ')'),
           xref='paper', yref='paper')
    )
  )

```


---

# Appendix

In this appendix, we print all the `r fontawesome::fa(name = "r-project", fill = "steelblue")` packages used in our analysis and their versions to assist with reproducing our results/analysis.

```{r sessionInfo}
pander(sessionInfo(), compact = TRUE) # printing the session info
```
